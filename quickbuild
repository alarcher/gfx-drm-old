#!/bin/ksh
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source.  A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#

#
# Copyright 2014 Nexenta Systems, Inc.  All rights reserved.
#

# Use distributed make (dmake) by default.
make=${MAKE:-dmake}

# Do this if you want to use dbx or gdb
# export SOURCEDEBUG=yes

[ -n "$SRC" ] || {
  echo "SRC not set.  Run 'ws' or 'bldenv' first."
  exit 1
}

cpu=`uname -p`
case $cpu in
i386)
	x=intel
	mdb_arch="ia32 amd64"
	arch64=amd64
	;;
sparc)
	x=sparc
	mdb_arch=v9
	arch64=sparcv9
	;;
*)  echo "Huh?" ; exit 1;;
esac

################################################################

build_tools() {
  test -f $SRC/tools/proto/root_i386-nd/opt/onbld/bin/genoffsets ||
    (cd $SRC/tools && $make install)
  (cd $SRC/common/mapfiles/common; $make install)
}

clobber_tools() {
  (cd $SRC/tools && $make clobber)
  (cd $SRC/common/mapfiles/common; $make clobber)
}

################################################################

do_hdrs() {

case $1 in
clean|clobber)
  (cd $SRC/uts && $make -k clobber_h)
  (cd $SRC/head && $make clobber)
  ;;
install)
  (cd $SRC && $make sgs)
  (cd $SRC/uts/common/drm && $make -k install_h)
  (cd $SRC/uts/common/sys && $make -k install_h)
  ;;
*)
  ;;
esac

# Need some library headers too...
(cd $SRC/lib/libfoo && $make $targ)

}

################################################################

do_kern() {
  case $1 in
  lint) targ=modlintlib ;;
  *) targ=$1 ;;
  esac
  ( unset SOURCEDEBUG ;
    (cd $SRC/uts/$x/foo && $make $targ) ;
    (cd $SRC/uts/intel/drm && $make $targ) ;
    (cd $SRC/uts/intel/i915 && $make $targ)
  )
}

################################################################

do_libs() {

  (cd $SRC/lib && $make $1)

}

################################################################

do_cmds() {

  (cd $SRC/cmd && $make $1)

}

################################################################

do_mans() {

  (cd $SRC/man && $make $1)
}


################################################################

do_pkg() {

  (cd $SRC/pkg && $make $1)
}


################################################################
# This builds $SRC/TAGS (and cscope.files) in a helpful order.

do_tags() {
	(cd $SRC ;
	find uts/common/sys -name '*.[ch]' -print |sort
	find uts/common/drm -name '*.[ch]' -print |sort
	find uts/common/io/drm -name '*.[ch]' -print |sort
	find uts/intel/io/i915 -name '*.[ch]' -print |sort
	find lib/libfoo -name '*.[ch]' -print |sort
	find cmd/foo -name '*.[ch]' -print |sort
	) > $SRC/cscope.files

	(cd $SRC ;
	exctags -e -L - < cscope.files
	cscope -b )
}

################################################################
# This creates a tarfile one can use to update a test machine.

do_tar() {
	git_rev=`git rev-parse --short=8 HEAD`
	files="
kernel/drv/foo.conf
kernel/drv/$arch64/foo
kernel/drv/foo
usr/lib/libfoo.so.1
usr/lib/libfoo.so
usr/bin/foo
"

	(cd $ROOT && tar cfj ../../drm-${git_rev}.tar.bz2 $files)
}

################################################################

if [ "$1" = "" ]; then
  set '?' # force usage
fi

set -x

for arg
do
  case "$arg" in
  install)
    build_tools
    set -e
    do_hdrs $arg
    do_kern $arg
    do_libs $arg
    do_cmds $arg
    do_mans $arg
    ;;
  lint)
    do_kern $arg
    do_libs $arg
    do_cmds $arg
    ;;
  check)
    do_libs $arg
    do_cmds $arg
    do_mans $arg
    do_pkg  $arg
    ;;
  clean)
    # intentionally skip: lib1, hdrs, tools
    do_mans $arg
    do_cmds $arg
    do_libs $arg
    do_kern $arg
    ;;
  clobber)
    do_pkg  $arg
    do_mans $arg
    do_cmds $arg
    do_libs $arg
    do_kern $arg
    do_hdrs $arg
    clobber_tools
    ;;
  pkg)
    do_pkg install
    ;;
  tags)
    do_tags
    ;;
  tar)
    do_tar
    ;;
  *)
    echo "Usage: $0 {install|lint|check|clean|clobber|pkg|tags|tar}";
    exit 1;
    ;;
  esac
done
